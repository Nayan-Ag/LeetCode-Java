Ques: In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.

Code:
class Solution {
    public int pairSum(ListNode head) {
        int size = size(head);
        ListNode temp = mid(head , size);
        ListNode reverse = reverse(temp);
        System.out.print(temp.val + " " + reverse.val);
        int sum =  0;
        for(int i=0 ; i<size/2 ; i++){
            if( (head.val + reverse.val) > sum ){
                sum = head.val + reverse.val;
            }
            head = head.next;
            reverse = reverse.next;
        }
        return sum;
    }
    public int size(ListNode head){
        int size = 0;
        while(head!=null){
            head = head.next;
            size++;
        }
        return size;
    }
    public ListNode mid(ListNode head , int size){
        ListNode temp = head;
        for(int i=0;i<size/2 ; i++){
            temp = temp.next;
        }
        return temp;
    }
    public ListNode reverse(ListNode head){
        if(head==null || head.next==null){
            return head;
        }
        ListNode prev = head;
        ListNode curr = head.next;
        while(curr!=null){
            ListNode temp = curr.next;
            curr.next = prev;
            prev = curr;
            curr = temp;
        }
        return prev;
    }
}
