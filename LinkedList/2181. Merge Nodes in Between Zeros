Ques: You are given the head of a linked list, which contains a series of integers separated by 0's. The beginning and end of the linked list will have Node.val == 0.

For every two consecutive 0's, merge all the nodes lying in between them into a single node whose value is the sum of all the merged nodes. The modified list should not contain any 0's.

Return the head of the modified linked list.

Code:
class Solution {
    public ListNode mergeNodes(ListNode head) {
        ListNode headA = new ListNode(0);
        ListNode temp = headA;
        head = head.next;
        int sum = 0;
        while(head!=null){
            if(head.val==0){
                ListNode node = new ListNode();
                node.val = sum;
                temp.next = node;
                temp = temp.next;
                sum = 0;
                head = head.next;
            }
            else{
                sum = sum + head.val;
                head = head.next;
            }
        }
        return headA.next;
    }
}
