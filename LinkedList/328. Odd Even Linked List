Ques: Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

Code:
class Solution {
    public ListNode oddEvenList(ListNode head) {
        if(head==null || head.next==null){
            return head;
        }
        ListNode temp1 = new ListNode(0);
        ListNode temp2 = new ListNode(0);
        ListNode curr1 = temp1;
        ListNode curr2 = temp2;
        ListNode curr = head;
        int size = 1;
        while(curr!=null){
            ListNode node = new ListNode(curr.val);
            if(size%2==0){
                curr2.next = node;
                curr2 = curr2.next;
                curr = curr.next;
                size++;
            }
            else{
                curr1.next = node;
                curr1 = curr1.next;
                curr = curr.next;
                size++;
            }
        }
        temp1 = temp1.next;
        temp2 = temp2.next;
        curr1.next = temp2;
        return temp1;
    }
}
